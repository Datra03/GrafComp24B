import random as rand 
import numpy as np
import matplotlib.pyplot as plt 
# Construye una parte del convexo (convex hull).
def turn_right():
    array = [coord_points[0], coord_points[1]]
    for i in range(2, len(coord_points)):
        array.append(coord_points[i])
        while len(array) > 2 and np.linalg.det([array[-3], array[-2], array[-1]]) > 0:
            array.pop(-2)
    return array

# Construye la envolvente convexa utilizando la función turn_right.
def convex_hull():
    coord_points.sort()
    l_upper = turn_right()
    coord_points.reverse()
    l_lower = turn_right()
    l = l_upper + l_lower
    return l

# Grafica los puntos originales y el polígono del convex_hull
def graph(convex_pol, coord_points):
    # Acomodando listas adecuadas para graicar en matplot
    x_points = [i[0] for i in coord_points]
    y_points = [i[1] for i in coord_points]
    x_polygon = [i[0] for i in convex_pol]
    y_polygon = [i[1] for i in convex_pol]
    
    # Definiendo límites extremos de la gráfica
    x_lim_der = max(x_points) + 5
    y_lim_sup = max(y_points) + 5
    x_lim_izq = min(x_points) - 5
    y_lim_inf = min(y_points) - 5
    
    # Asignación de los límites extremos
    plt.xlim(x_lim_izq, x_lim_der)
    plt.ylim(y_lim_inf, y_lim_sup)
    
    # Graficación
    plt.title('Problema: Envolvente Convexo')
    plt.xlabel('Eje de las abscisas')
    plt.ylabel('Eje de las ordenadas')
    plt.plot(x_points, y_points, 'ko')
    plt.plot(x_polygon, y_polygon, 'g-', linewidth = 2.0)
    plt.show()

# Generar una lista de 100 puntos aleatorios en un plano.
num_points = 100
coord_points = []
for i in range(num_points): coord_points.append([rand.uniform(0, 50), rand.uniform(0, 100), 1.0])

# Crea el polígono convexo a partir de los puntos generados y graficarlo.
convex_pol = convex_hull()
graph(convex_pol, coord_points)

Creamos otro poligono
def turn_right():
    array = [coord_points[0], coord_points[1]]
    for i in range(2, len(coord_points)):
        array.append(coord_points[i])
        while len(array) > 3 and np.linalg.det([array[-3], array[-2], array[-1]]) >= 0:
            array.pop(-2)
    return array

# Función para calcular la envolvente convexa
def convex_hull():
    coord_points.sort()
    l_upper = turn_right()
    coord_points.reverse()
    l_lower = turn_right()
    l = l_upper + l_lower
    return l

# Función para graficar los puntos y el polígono convexo
def graph(convex_pol, coord_points):
   
    x_points = [i[0] for i in coord_points]
    y_points = [i[1] for i in coord_points]
    x_polygon = [i[0] for i in convex_pol]
    y_polygon = [i[1] for i in convex_pol]
    
    # Definición de los límites de la gráfica con un margen extra
    x_lim_der = max(x_points) + 10
    y_lim_sup = max(y_points) + 10
    x_lim_izq = min(x_points) - 10
    y_lim_inf = min(y_points) - 10
    
    # Ajuste de los límites de la gráfica
    plt.xlim(x_lim_izq, x_lim_der)
    plt.ylim(y_lim_inf, y_lim_sup)
    
    # Configuración de los títulos y etiquetas de la gráfica
    plt.title('Polígono Convexo Modificado')
    plt.xlabel('Eje X')
    plt.ylabel('Eje Y')
    
    # Graficación de los puntos como círculos negros y del polígono convexo como una línea azul
    plt.plot(x_points, y_points, 'ko')  # Puntos originales
    plt.plot(x_polygon, y_polygon, 'b-', linewidth = 2.0)  # Polígono convexo modificado
    plt.show()

# Generación de puntos aleatorios en un rango más amplio (modificado)
num_points = 100
coord_points = []
for i in range(num_points):
    coord_points.append([rand.uniform(-100, 100), rand.uniform(-100, 100), 1.0])

# Creación y graficación del polígono convexo modificado
convex_pol = convex_hull()
graph(convex_pol, coord_points)
 

Poligono 3
def turn_right():
    array = [coord_points[0], coord_points[1]]
    for i in range(2, len(coord_points)):
        array.append(coord_points[i])
        while len(array) > 3 and np.linalg.det([array[-3], array[-2], array[-1]]) < 0:
            array.pop(-2)  
    return array

# Función para calcular la envolvente convexa
def convex_hull():
    coord_points.sort()
    l_upper = turn_right()
    coord_points.reverse()
    l_lower = turn_right()
    l = l_upper + l_lower
    return l

# Función para graficar los puntos y el polígono convexo
def graph(convex_pol, coord_points):
    x_points = [i[0] for i in coord_points]
    y_points = [i[1] for i in coord_points]
    x_polygon = [i[0] for i in convex_pol]
    y_polygon = [i[1] for i in convex_pol]
    
    # Definición de los límites de la gráfica con un margen extra
    x_lim_der = max(x_points) + 10
    y_lim_sup = max(y_points) + 10
    x_lim_izq = min(x_points) - 10
    y_lim_inf = min(y_points) - 10
    
    # Ajuste de los límites de la gráfica
    plt.xlim(x_lim_izq, x_lim_der)
    plt.ylim(y_lim_inf, y_lim_sup)
    
    # Título y etiquetas
    plt.title('Polígono Convexo con Polares')
    plt.xlabel('Eje X')
    plt.ylabel('Eje Y')
    

    plt.plot(x_points, y_points, 'ko')  
    plt.plot(x_polygon, y_polygon, 'r-', linewidth = 2.0)  # Polígono convexo modificado
    plt.show()

# Generación de puntos aleatorios con distribución en un patrón circular
num_points = 100
coord_points = []
for i in range(num_points):
    # Generación de puntos en un rango circular utilizando coordenadas polares
    r = rand.uniform(0, 50)  # Distancia desde el origen
    theta = rand.uniform(0, 2 * np.pi)  # Ángulo en radianes
    x = r * np.cos(theta)  # Conversión a coordenadas cartesianas
    y = r * np.sin(theta)
    coord_points.append([x, y, 1.0])  # Añadiendo las coordenadas a la lista

# Creación y graficación del polígono convexo modificado
convex_pol = convex_hull()
graph(convex_pol, coord_points)
